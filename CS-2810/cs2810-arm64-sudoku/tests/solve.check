#include <inttypes.h>
#include <string.h>

extern int64_t solve(char *);
extern int64_t callfunction(char *);
extern int64_t (*target_function)(char *);
extern int64_t unsaved_register_number;

#suite alltests

#tcase test_solve
#test test_solve
    // test with a fully solved board
    char orig[] = {
        4, 6, 7, 3, 2, 1, 5, 8, 9,
        9, 2, 8, 6, 4, 5, 3, 1, 7,
        1, 5, 3, 9, 8, 7, 4, 6, 2,
        5, 7, 9, 8, 6, 4, 1, 2, 3,
        8, 3, 1, 2, 5, 9, 6, 7, 4,
        2, 4, 6, 7, 1, 3, 9, 5, 8,
        6, 9, 2, 1, 3, 8, 7, 4, 5,
        3, 8, 4, 5, 7, 6, 2, 9, 1,
        7, 1, 5, 4, 9, 2, 8, 3, 6
    };
    char board[81];
    memmove(board, orig, 81);
    ck_assert_int_eq(callfunction(board), 0);
    ck_assert_int_eq(unsaved_register_number, 0);

    // remove one cell and it should still succeed
    memmove(board, orig, 81);
    board[75] = 0;
    ck_assert_int_eq(callfunction(board), 0);
    ck_assert_int_eq(unsaved_register_number, 0);

    // the solved board should match the original
    ck_assert_int_eq(memcmp(board, orig, 81), 0);

    // remove five cells and it should still succeed
    memmove(board, orig, 81);
    board[0] = 0;
    board[11] = 0;
    board[34] = 0;
    board[59] = 0;
    board[77] = 0;
    ck_assert_int_eq(callfunction(board), 0);
    ck_assert_int_eq(unsaved_register_number, 0);

    // the solved board should match the original
    ck_assert_int_eq(memcmp(board, orig, 81), 0);

    char unsolved[] = {
        4, 0, 0, 7, 0, 3, 0, 0, 5,
        0, 7, 0, 9, 0, 0, 6, 1, 3,
        0, 2, 6, 5, 0, 1, 0, 7, 8,
        5, 4, 2, 8, 9, 0, 0, 0, 0,
        6, 0, 7, 1, 0, 0, 5, 9, 0,
        0, 0, 0, 0, 0, 0, 8, 0, 0,
        1, 0, 8, 2, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 0, 0, 7, 0, 0,
        0, 6, 3, 0, 8, 0, 2, 5, 1
    };
    char solved[] = {
        8, 1, 9, 7, 6, 3, 4, 2, 5,
        4, 7, 5, 9, 2, 8, 6, 1, 3,
        3, 2, 6, 5, 4, 1, 9, 7, 8,
        5, 4, 2, 8, 9, 7, 1, 3, 6,
        6, 8, 7, 1, 3, 4, 5, 9, 2,
        9, 3, 1, 6, 5, 2, 8, 4, 7,
        1, 9, 8, 2, 7, 5, 3, 6, 4,
        2, 5, 4, 3, 1, 6, 7, 8, 9,
        7, 6, 3, 4, 8, 9, 2, 5, 1
    };
    memmove(board, unsolved, 81);

    // this board is unsolvable
    ck_assert_int_eq(callfunction(unsolved), 1);
    ck_assert_int_eq(unsaved_register_number, 0);

    // should have been restored to pristine state
    ck_assert_int_eq(memcmp(board, unsolved, 81), 0);

    // make it solveable and try again
    memmove(board, unsolved, 81);
    board[0] = 0;
    ck_assert_int_eq(callfunction(board), 0);
    ck_assert_int_eq(unsaved_register_number, 0);

    // make sure the solution was correct
    ck_assert_int_eq(memcmp(board, solved, 81), 0);

#main-pre
    srunner_set_xml(sr, "test_results.xml");
    target_function = solve;
